{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js","Table.module.css"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStart","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","styles","table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.64b07b9e.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport \"./infoBox.css\";\r\n\r\nconst InfoBox = ({ title, cases, total, active, isRed, ...props })=>{\r\n  return(\r\n    <Card onClick={props.onClick}\r\n      className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}\r\n    >\r\n      <CardContent >\r\n        {/* Title i.e Coronavirus cases */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n        {/* +120k number of cases */}\r\n        <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\r\n        {/* 1.2M Total */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    //half_op: \"rgba(204, 16, 52, 05)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    //half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#FB4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n  //  half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data)=>{\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b)=>{\r\n    //console.log(`country ${a.country}, cases ${a.cases}`)\r\n    if(a.cases > b.cases){\r\n      return -1;\r\n    }else{\r\n      return 1;\r\n    }\r\n  })\r\n  return sortedData;\r\n}\r\n// draw circles on the map with interactive tooltop\r\nexport const showDataOnMap = (data, casesType=\"cases\")=>(\r\n  data.map(country=>(\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType])* casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})`}} />\r\n          <div className=\"info-name\">\r\n            {country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ))\r\n);\r\n\r\nexport const prettyPrintStart = (stat)=>\r\n      stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n","import React, { Component, useState, useEffect } from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\nimport \"./Map.css\";\r\n\r\nconst Map = ({ countries, casesType, center, zoom })=>{\r\n  return(\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n      {/* loop through countries and draw circles on the screen */}\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { Component } from 'react';\r\nimport cx from \"classnames\";\r\nimport styles from \"./Table.module.css\";\r\nimport numeral from \"numeral\";\r\n\r\nconst Table = ({ countries })=>{\r\n  return(\r\n    <div className={styles.table}>\r\n      {\r\n        countries.map(country=>(\r\n          <tr>\r\n            <td>{country.country}</td>\r\n            <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\r\n          </tr>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component, useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\n// options\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point:{\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips:{\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks:{\r\n      label: function(tooltipItem, data){\r\n        return numeral(tooltipItem.value).format(\"+0.0\");\r\n      },\r\n    },\r\n  },\r\n  scales:{\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time:{\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // include a dollar sign in the ticks\r\n          callback: function(value, index, values){\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n// 3:05:02\r\nconst buildChartData = (data, casesType)=>{\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for(let date in data.cases){\r\n    if(lastDataPoint){\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date]-lastDataPoint\r\n      }\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n}\r\n\r\nconst LineGraph = ({ casesType=\"cases\" , ...props})=>{\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(()=>{\r\n    const fetchData = async()=>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n          .then(response=>{\r\n            return response.json();\r\n          })\r\n          .then(data=>{\r\n            console.log(data);\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n          });\r\n    }\r\n    fetchData();\r\n  },[casesType])\r\n\r\n  return(\r\n    <div className={props.className}> {/* that props means to give name app__graph from app.Js*/}\r\n      {data && data.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport LineGraph from './LineGraph';\r\nimport './App.css';\r\nimport { sortData } from './util';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { prettyPrintStart } from './util';\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState('worldwide');\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n\r\n  const [casesType, setCasesType] = useState(\"cases\"); //3:59:18\r\n  // 1:14:13\r\n  //  useEffect = runs a piece of code, based on a given condition\r\n  useEffect(()=>{\r\n    // the code inside here will run once when the component loads and not again\r\n    // async is send a request, wait for it, do something with import\r\n    // the difference a map function with forEach can u check it out in 1:19:00\r\n    const getCountriesData = async()=>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response)=> response.json())\r\n        .then((data)=>{\r\n          const countries = data.map((country)=>({\r\n            name: country.country, // united states, united kingdom\r\n            value: country.countryInfo.iso2 // UK, USA, FR\r\n          }));\r\n          const sortedData = sortData(data);\r\n          //console.log(data);\r\n          setCountries(countries);\r\n          //setTableData(data);\r\n          setTableData(sortedData);\r\n          setMapCountries(data);\r\n        });\r\n    };\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then(response=> response.json())\r\n      .then(data => {\r\n        setCountryInfo(data);\r\n      }) // at lest 2:13:33 <-- check it out. position end at here\r\n  },[]);\r\n\r\n  const onCountryChange = async(event)=>{\r\n    const countryCode = event.target.value;\r\n    if(countryCode === \"worldwide\"){\r\n      const url = \"https://disease.sh/v3/covid-19/all\";\r\n      await fetch(url)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setCountry(countryCode);\r\n          setCountryInfo(data);\r\n          setMapCenter({lat: 34.80746, lng: -40.4796});\r\n          setMapZoom(2);\r\n        })\r\n    }else{\r\n      const url = `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n      await fetch(url)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setCountry(countryCode);\r\n          // All of the data from the country response\r\n          setCountryInfo(data);\r\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n          setMapZoom(4);\r\n        });\r\n    }\r\n  };\r\n// isRed is passing in table.js\r\n//  console.log(\"country info\", countryInfo);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n          <h1> COVID 19 Tracker</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n              {\r\n                countries.map( country => (\r\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                ))\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"app__stats\">\r\n          <InfoBox\r\n            isRed\r\n            onClick={ e => setCasesType(\"cases\") }\r\n            active={casesType === \"cases\" }\r\n\r\n            title=\"Coronavirus Cases\"\r\n            cases={prettyPrintStart(countryInfo.todayCases)}\r\n            total={prettyPrintStart(countryInfo.cases) }\r\n          />\r\n          <InfoBox\r\n            onClick={ e => setCasesType(\"recovered\") }\r\n            active={casesType === \"recovered\" }\r\n\r\n            title=\"Recovered\"\r\n            cases={prettyPrintStart(countryInfo.todayRecovered)}\r\n            total={prettyPrintStart(countryInfo.recovered)}\r\n          />\r\n          <InfoBox\r\n            isRed\r\n            onClick={ e => setCasesType(\"deaths\") }\r\n            active={casesType === \"deaths\" }\r\n\r\n            title=\"Deaths\"\r\n            cases={prettyPrintStart(countryInfo.todayDeaths)}\r\n            total={prettyPrintStart(countryInfo.deaths)}\r\n          />\r\n        </div>\r\n        {/* Map*/}\r\n        <Map\r\n          countries={mapCountries} center={mapCenter}\r\n          zoom={mapZoom} casesType={casesType}\r\n        />\r\n      </div>\r\n      <Card className=\"app__right\">\r\n        <CardContent>\r\n          <h3>Live Cases by Country</h3>\r\n          <Table countries={tableData} />\r\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType} </h3>\r\n          <LineGraph className=\"app__graph\" casesType={casesType} />\r\n          {/* Graph */}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2q2RE\"};"],"sourceRoot":""}